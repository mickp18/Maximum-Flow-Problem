
/*
thread(u,v)
	
	while (!sink_labeled){
		// put label
        if case 1
		else case 2
		
		if (nodes[t].isLabeled())
            // block all threads
			augment()
			// update flow
			// signal all
			update done
			return
		
		else 
			for (edges of v)
				thread(u1, v1)
			
			wait threads.join
		}
		
    }
       
         > 2
       /
      0       - o labeled, unscanned -> thread (0,1) puts 0 as scanned and puts label on 1
              - 0 labeled, scanned -> thread (2,0') -> ?
        \> 1



generate array of thread ids, with len = 2*num of edges
label source node
for every neighbour of source:
    generate a thread
    add the thread id to the array of thread ids
    pass the func f to each thread
wait for a flow to be returned (>=0)
when a flow val is returned, remove all labels except label of source node
if flow>0, restart from the for loop
else, return max flow


func f (start_node, end_node)

if start node is labeled and flow < capacity
    if end node is not labeled
        compute label of end node
        wx label of end node
*/